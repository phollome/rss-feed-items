{
  "version": 3,
  "sources": ["src/index.ts", "src/utils.ts"],
  "sourcesContent": ["import { writeFile as writeFileCb } from \"fs\";\nimport { promisify } from \"util\";\nimport { getItems, fetch } from \"./utils\";\n\nconst writeFile = promisify(writeFileCb);\n\nconst feedUrl = process.env.FEED_URL;\nif (feedUrl === undefined) {\n  throw new Error(\"environment variable FEED_ENV needs to be set\");\n}\nconst itemsLimit = process.env.ITEMS_LIMIT;\n\nasync function main() {\n  const xml = (await fetch(feedUrl)) as string;\n\n  let limit: number | undefined;\n  if (itemsLimit !== undefined) {\n    limit = parseInt(itemsLimit);\n  }\n  const items = getItems(xml, limit);\n\n  await writeFile(\"./items.json\", JSON.stringify(items), \"utf-8\");\n}\n\nmain()\n  .then(() => console.log(\"done.\"))\n  .catch((err) => console.error(err));\n", "import type { Item } from \"./types\";\nimport * as https from \"https\";\n\nimport { XMLParser } from \"fast-xml-parser\";\n\nconst parser = new XMLParser({\n  stopNodes: [\"rss.channel.item.description\"],\n});\n\nexport function removeContentDataSection(string: string): string {\n  if (string.startsWith(\"<![CDATA[\") && string.endsWith(\"]]>\")) {\n    return string\n      .replace(\"<![CDATA[\", \"\")\n      .replace(\"]]>\", \"\")\n      .trimStart()\n      .trimEnd();\n  }\n  return string;\n}\n\nexport function removeHtmlTags(string: string): string {\n  return string.replace(/(<([^>]+)>)/gi, \"\");\n}\n\nexport function getItems(xml: string, limit: number = -1): Array<Item> {\n  const document = parser.parse(xml);\n  const itemsMap = document.rss.channel.item;\n\n  let items: Array<Item> = [];\n  if (Array.isArray(itemsMap)) {\n    items = itemsMap;\n  } else {\n    items.push(itemsMap);\n  }\n\n  if (limit > -1) {\n    items = items.slice(0, limit);\n  }\n\n  const cleanedItems = items.map((item) => {\n    const { description, ...otherProps } = item;\n    return {\n      ...otherProps,\n      description: removeHtmlTags(removeContentDataSection(description)),\n    };\n  });\n\n  return cleanedItems;\n}\n\nexport function fetch(url) {\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, (res) => {\n        let body = \"\";\n        res.on(\"data\", (chunk) => {\n          body += chunk;\n        });\n        res.on(\"end\", () => resolve(body));\n      })\n      .on(\"error\", (err) => reject(err));\n  });\n}\n"],
  "mappings": "ygCAAA,MAAyC,cACzC,EAA0B,gBCA1B,MAAuB,oBAEvB,EAA0B,2BAEpB,EAAS,GAAI,aAAU,CAC3B,UAAW,CAAC,kCAGP,WAAkC,EAAwB,CAC/D,MAAI,GAAO,WAAW,cAAgB,EAAO,SAAS,OAC7C,EACJ,QAAQ,YAAa,IACrB,QAAQ,MAAO,IACf,YACA,UAEE,EAGF,WAAwB,EAAwB,CACrD,MAAO,GAAO,QAAQ,gBAAiB,IAGlC,WAAkB,EAAa,EAAgB,GAAiB,CAErE,GAAM,GAAW,AADA,EAAO,MAAM,GACJ,IAAI,QAAQ,KAElC,EAAqB,GACzB,MAAI,OAAM,QAAQ,GAChB,EAAQ,EAER,EAAM,KAAK,GAGT,EAAQ,IACV,GAAQ,EAAM,MAAM,EAAG,IAGJ,EAAM,IAAI,AAAC,GAAS,CACvC,GAAuC,KAA/B,gBAA+B,EAAf,IAAe,EAAf,CAAhB,gBACR,MAAO,QACF,GADE,CAEL,YAAa,EAAe,EAAyB,QAOpD,WAAe,EAAK,CACzB,MAAO,IAAI,SAAQ,CAAC,EAAS,IAAW,CACtC,AACG,MAAI,EAAK,AAAC,GAAQ,CACjB,GAAI,GAAO,GACX,EAAI,GAAG,OAAQ,AAAC,GAAU,CACxB,GAAQ,IAEV,EAAI,GAAG,MAAO,IAAM,EAAQ,MAE7B,GAAG,QAAS,AAAC,GAAQ,EAAO,MDxDnC,GAAM,GAAY,gBAAU,aAEtB,EAAU,QAAQ,IAAI,SAC5B,GAAI,IAAY,OACd,KAAM,IAAI,OAAM,iDAElB,GAAM,GAAa,QAAQ,IAAI,YAE/B,kBAAsB,CACpB,GAAM,GAAO,KAAM,GAAM,GAErB,EACJ,AAAI,IAAe,QACjB,GAAQ,SAAS,IAEnB,GAAM,GAAQ,EAAS,EAAK,GAE5B,KAAM,GAAU,eAAgB,KAAK,UAAU,GAAQ,SAGzD,IACG,KAAK,IAAM,QAAQ,IAAI,UACvB,MAAM,AAAC,GAAQ,QAAQ,MAAM",
  "names": []
}
